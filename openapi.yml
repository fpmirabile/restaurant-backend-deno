swagger: "2.0"
info:
  version: "1.0.0"
  title: "Morfando Inc."
  description: "APIs for Morfando Inc. Aplicaciones distribuidas 2C UADE 2022"
  contact:
    email: "contact@morfandoinc.com"
host: "morfandoinc-demo.fly.dev"
tags:
  - name: "Auth"
    description: "JWT authentication"
  - name: "Users"
    description: "User entity"
  - name: "Restaurant"
    description: "Restaurant entity"
  - name: "Menu"
    description: "Menu entity"
  - name: "Meal"
    description: "The meal entity"
schemes:
  - "https"
securityDefinitions:
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization
paths:
  /login:
    post:
      tags:
        - "Auth"
      summary: "User login through credentials (email, password)"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/LoginCredential"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthToken"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
  /login/sso:
    post:
      tags:
        - "Auth"
      summary: "User login through SSO (Google)"
      operationId: "loginSSO"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/LoginSSO"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthToken"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
  /register:
    post:
      tags:
        - "Auth"
      summary: "This endpoint registers a new user to login through credentials. Will result in a restaurant owner user type."
      operationId: "register"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/UserRegistration"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserModel"
        "400":
          description: "Invalid request"
        "500":
          description: "Something went wrong."
  /me:
    get:
      tags:
        - "Users"
      summary: "Get currently logged user information."
      security:
        - BearerAuth: []
      description: "Get currently logged user information data through JWT token data."
      operationId: "getMe"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserModel"
        "401":
          description: "Unauthorized user"
        "500":
          description: "Something went wrong."
  /users:
    delete:
      tags:
        - "Users"
      summary: "Removes an user access to the system"
      security:
        - BearerAuth: []
      description: "Disables an user to access our system."
      operationId: "deleteMe"
      produces:
        - "application/json"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "500":
          description: "Something went wrong."
  /users/recovery:
    post:
      tags:
        - "Users"
      summary: "User requested to reset its password."
      security:
        - BearerAuth: []
      description: "The user will receive an email with an app link. This link will take it to reset password flow."
      operationId: "recoverPassword"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RecoverPassword"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Request malformed"
        "401":
          description: "Unauthorized user"
        "500":
          description: "Something went wrong."
  /users/password:
    put:
      tags:
        - "Users"
      summary: "Allows to set a new password in the user's account."
      security:
        - BearerAuth: []
      description: "Sets the new user's password after going through reset password flow."
      operationId: "setUserPassword"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/ChangePassword"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Request malformed"
        "401":
          description: "Unauthorized user"
        "500":
          description: "Something went wrong."
  /likes:
    get:
      tags:
        - "Users"
      summary: "Get user's favorites/liked restaurants"
      security:
        - BearerAuth: []
      description: "Get all favorite/liked restaurants from the currently logged user."
      operationId: "getUserLikes"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
        "500":
          description: "Something went wrong."
    post:
      tags:
        - "Users"
      summary: "Saves a new favorite/liked restaurant for the currently logged user."
      security:
        - BearerAuth: []
      description: "Saves a new record for a favorite/liked restaurants for the currently logged user."
      operationId: "savesNewLike"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateLike"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Request malformed"
        "500":
          description: "Something went wrong."
  /likes/{restaurantId}:
    delete:
      tags:
        - "Users"
      summary: Removes a favorite/liked restaurant for currently logged user.
      security:
        - BearerAuth: []
      description: "If the restaurantId exists in the currently logged user records it will be deleted from there. Otherwise it will return a 404."
      operationId: "removeUserLike"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "Id of the restaurant"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Like not found"
  /restaurants:
    get:
      tags:
        - "Restaurant"
      summary: "Get all restaurants"
      security:
        - BearerAuth: []
      description: "Get all of my created restaurants as an owner. If this endpoint is called by a 'client' user, it will return 403, forbidden."
      operationId: "getRestaurantList"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
    post:
      tags:
        - "Restaurant"
      summary: "Saves a new restaraunt, called by restaurant owner."
      security:
        - BearerAuth: []
      description: "Saves new restaurant for owner. If client user calls this endpoint will result in a 403, forbidden."
      operationId: "saveRestaurant"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewRestaurantModel"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RestaurantModel"
        "500":
          description: "Something went wrong."
        "400":
          description: "Request malformed or data validation error."
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
  /restaurants/{restaurantId}:
    get:
      tags:
        - "Restaurant"
      summary: "Gets a restaurant information"
      security:
        - BearerAuth: []
      description: "Get detail information of a restaurant called by owner. If client user calls this endpoint will end in a 403, forbidden."
      operationId: "getRestaurantById"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID the restaurant return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant not found"
    put:
      tags:
        - "Restaurant"
      summary: "Updates a restaurant properties"
      security:
        - BearerAuth: []
      description: "Updates a restaurant fields for specific owner. If client user calls this endpoint will end in 403, forbidden."
      operationId: "updateRestaurant"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewRestaurantModel"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Request malformed or data validation error."
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant not found"
    delete:
      tags:
        - "Restaurant"
      summary: "Deletes the restaurant of currently logged owner."
      security:
        - BearerAuth: []
      description: "Delete a restaurant information from currently logged owner. If client calls this endpoint will end in 403, forbidden."
      operationId: "deleteRestaurant"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant not found"
  /restaurants/{restaurantId}/menus:
    get:
      tags:
        - "Menu"
      summary: "Gets all menues from a restaurant"
      security:
        - BearerAuth: []
      description: "Gets a restaurant menus for an owner user type."
      operationId: "getAllMenues"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant not found"
    post:
      tags:
        - "Menu"
      summary: "Saves a new menu into a restaurant."
      security:
        - BearerAuth: []
      description: "Saves a new menu for a restaurant for an owner user type."
      operationId: "saveMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewMenuModel"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MenuModel"
        "400":
          description: "Request malformed or data validation error."
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant not found"
  /restaurants/{restaurantId}/menus/{menuId}:
    get:
      tags:
        - "Menu"
      summary: "Gets all menus from a restaurant."
      security:
        - BearerAuth: []
      description: "Gets all menus for a restaurant for an owner user type."
      operationId: "getMenuById"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MenuModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant or Menu not found"
    put:
      tags:
        - "Menu"
      summary: "Updates a menu from a restaurant."
      security:
        - BearerAuth: []
      description: "Updates a menu from a restaurant for an owner user type."
      operationId: "updateMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of menu"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewMenuModel"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Request malformed or data validation error."
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant or Menu not found"
    delete:
      tags:
        - "Menu"
      summary: "Deletes a menu from a restaurant."
      security:
        - BearerAuth: []
      description: "Deletes a menu from a restaurant for an owner user type."
      operationId: "deleteMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"  
        "404":
          description: "Menu not found"
  /restaurants/{restaurantId}/menus/{menuId}/meals:
    post:
      tags:
        - "Meal"
      summary: "Saves a new meal into a menu."
      security:
        - BearerAuth: []
      description: "Saves a new meal into a menu for for an owner user type."
      operationId: "saveMealsInMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewMealModel"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MealModel"
        "400":
          description: "Request malformed or data validation error."
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant or menu not found"
    get:
      tags:
        - "Meal"
      summary: "Gets all meals in a menu."
      security:
        - BearerAuth: []
      description: "Gets all meals in a menu for an owner user type."
      operationId: "getAllMealsInMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MealModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant or menu not found"
  /restaurants/{restaurantId}/menus/{menuId}/meals/{mealId}:
    get:
      tags:
        - "Meal"
      summary: "Gets a meal in a menu."
      security:
        - BearerAuth: []
      description: "Gets a meal in a menu for an owner user type."
      operationId: "getMeal"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
        - name: "mealId"
          in: "path"
          description: "ID of the meal"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MealModel"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant, menu or meal not found"
    put:
      tags:
        - "Meal"
      summary: "Updates a meal in a menu."
      security:
        - BearerAuth: []
      description: "Updates a meal in a menu for an owner user type."
      operationId: "updateMealInMenu"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
        - name: "mealId"
          in: "path"
          description: "ID of the food"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/NewMealModel"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant, menu or meal not found"
    delete:
      tags:
        - "Meal"
      summary: "Removes a meal in a menu"
      security:
        - BearerAuth: []
      description: "Removes a meal in a menu for owner user type."
      operationId: "removeMeal"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "path"
          description: "ID of the restaurant"
          required: true
          type: "integer"
          format: "int64"
        - name: "menuId"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
          format: "int64"
        - name: "mealId"
          in: "path"
          description: "ID of the food"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "403":
          description: "Forbidden"
        "404":
          description: "Restaurant, menu or meal not found"
  /restaurants/near:
    get:
      tags:
        - "Restaurant"
      summary: "Get restaurants by user's position through latitude and longitude."
      security:
        - BearerAuth: []
      description: "Get a restaurant by a given position (latitude, longitude)."
      operationId: "getRestaurantByPosition"
      produces:
        - "application/json"
      parameters:
        - in: query
          name: lat
          type: string
          description: "latitude number of the current position"
        - in: query
          name: lon
          type: string
          description: "longitude number of the current position"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
definitions:
  LoginCredential:
    type: "object"
    properties:
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "password"
  LoginSSO:
    type: "object"
    properties:
      idToken:
        type: "string"
        format: "password"
      email:
        type: "string"
        format: "string"
  AuthToken:
    type: "object"
    properties:
      access_token:
        type: "string"
        format: "string"
      refresh_token:
        type: "string"
        format: "string"
  UserRegistration:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "password"
      confirmPassword:
        type: "string"
        format: "password"
  UserUpdateData:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
  UserModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
      roles:
        type: "string"
        format: "string"
      is_active:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  NewRestaurantModel:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      street:
        type: "string"
        format: "string"
      streetNumber:
        type: "string"
        format: "string"
      neighborhood:
        type: "string"
        format: "string"
      place:
        type: "string"
        format: "string"
      state:
        type: "string"
        format: "string"
      lat:
        type: "number"
        format: "float"
      lon:
        type: "number"
        format: "float"
      openDays:
        type: "array"
        items:
          type: "string"
      images:
        type: "array"
        items:
          type: "string"
      openTime:
        type: "string"
        format: "string"
      closeTime:
        type: "string"
        format: "string"
  RestaurantModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      address:
        type: "string"
        format: "string"
      ownerId:
        type: "integer"
        format: "int32"
      lat:
        type: "number"
        format: "float"
      lon:
        type: "number"
        format: "float"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  NewMenuModel:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
  MenuModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      categories:
        type: "array"
        items:
          $ref: "#/definitions/CategoryModel"
  NewCategoryModel:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
  CategoryModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      items:
        type: "array"
        items:
          $ref: "#/definitions/MealModel"
  NewMealModel:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      price:
        type: "number"
        format: "float"
      images:
        type: "array"
        items:
          type: "string"
      ingredients:
        type: "array"
        items:
          type: "string"
      suitableFor:
        type: "string"
        format: "string"
  MealModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      price:
        type: "number"
        format: "float"
      images:
        type: "array"
        items:
          type: "string"
      ingredients:
        type: "array"
        items:
          type: "string"
      suitableFor:
        type: "string"
        format: "string"
  RecoverPassword:
    type: "object"
    properties:
      email:
        type: "string"
        format: "string"
  ChangePassword:
    type: "object"
    properties:
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"
      confirmPassword:
        type: "string"
        format: "string"
      token:
        type: "string"
        format: "string"
  CreateLike:
    type: "object"
    properties:
      restaurantId:
        type: "integer"
        format: "int32"

externalDocs:
  description: "Swagger documentation"
  url: "http://swagger.io"
