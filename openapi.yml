swagger: "2.0"
info:
  version: "1.0.0"
  title: "Morfando Inc. REST APIs"
  contact:
    email: "fpmirabile@gmail.com"
host: "localhost:8000"
tags:
- name: "Auth"
  description: "JWT authentication"
- name: "Users"
  description: "User entity"
- name: "Restaurant"
  description: "Restaurant entity"
- name: "Menu"
  description: "Menu entity"
schemes:
- "http"
securityDefinitions:
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization
paths:
  /login:
    post:
      tags:
      - "Auth"
      summary: "User login through credentials"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/LoginCredential"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthToken"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
  /login/sso:
    post:
      tags:
      - "Auth"
      summary: "User login through SSO"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/LoginSSO"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthToken"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
  /register:
    post:
      tags:
      - "Auth"
      summary: "Register new restaurant owner"
      operationId: "register"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRegistration"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserModel"
        "400":
          description: "Invalid request"
  /restaurant:
    get:
      tags:
      - "Restaurant"
      summary: "Get all restaurants"
      security:
        - BearerAuth: []
      description: "Get list of my (owner) restaurants."
      operationId: "getRestaurantList"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
    post:
      tags:
      - "Restaurant"
      summary: "Saves a new restaraunt, called by restaurant owner."
      security:
        - BearerAuth: []
      description: "Saves a new restaurant entity on the db, called only by the restaurant owner user type."
      operationId: "saveRestaurant"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RestaurantModel"
      responses:
        "200":
          description: "successful operation"
          schema:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
  /restaurant/{restaurantId}:
    get:
      tags:
      - "Restaurant"
      summary: "Get restaurant by Id"
      security:
        - BearerAuth: []
      description: "Get a restaurant by id, called only by owner of the restaurant"
      operationId: "getRestaurantById"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID the restaurant return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Restaurant not found"
    put:
      tags:
      - "Restaurant"
      summary: "Update restaurant by restaurantId"
      security:
        - BearerAuth: []
      description: "Updates a restaurant by given restaurantId, called by owner only."
      operationId: "updateRestaurant"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RestaurantModel"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Restaurant not found"
    delete:
      tags:
      - "Restaurant"  
      summary: Delete a restaurant by restaurantId
      security:
        - BearerAuth: []
      description: "Delete a restaurant by Id, called by owner only."
      operationId: "deleteRestaurant"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Restaurant not found"
  /restaurant/{restaurantId}/menu:
    post:
      tags:
      - "Menu"
      summary: "Saves a new menu for a specific restaurant, called by restaurant owner."
      security:
        - BearerAuth: []
      description: "Saves a new menu for a restaurant by given id, called only by the restaurant owner."
      operationId: "saveMenu"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MenuModel"
      responses:
        "200":
          description: "successful operation"
          schema:
              $ref: "#/definitions/MenuModel"
        "401":
          description: "Unauthorized user"
  /restaurant/{restaurantId}/menu/{menuId}:
    get:
      tags:
      - "Menu"  
      summary: "Gets a restaurant menu by id"
      security:
        - BearerAuth: []
      description: "Gets a specific restaurant menu, called by owner only."
      operationId: "getMenuById"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant"
        required: true
        type: "integer"
        format: "int64"
      - name: "menuId"
        in: "path"
        description: "ID of the menu"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
              $ref: "#/definitions/MenuModel"
        "401":
          description: "Unauthorized user"
    put:
      tags:
      - "Menu"
      summary: "Updates a restaurant menu"
      security:
        - BearerAuth: []
      description: "Updates a restaurant menu by id, called by the owner."
      operationId: "updateMenu"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant"
        required: true
        type: "integer"
        format: "int64"
      - name: "menuId"
        in: "path"
        description: "ID of menu"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MenuModel"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MenuModel"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Restaurant not found"
    delete:
      tags:
      - "Menu"  
      summary: Delete a menu from a restaurant
      security:
        - BearerAuth: []
      description: "Delete a menu from a restaurant by Id, called by owner."
      operationId: "deleteMenu"
      produces:
      - "application/json"
      parameters:
      - name: "restaurantId"
        in: "path"
        description: "ID of the restaurant"
        required: true
        type: "integer"
        format: "int64"
      - name: "menuId"
        in: "path"
        description: "ID of the menu"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized user"
        "404":
          description: "Menu not found"
  /restaurant/near:
    get:
      tags:
      - "Restaurant"
      summary: "Get restaurants by user's position"
      security:
        - BearerAuth: []
      description: "Get a restaurant by a given position."
      operationId: "getRestaurantByPosition"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: lat
        type: string
        description: latitude number of the current position
      - in: query
        name: lon
        type: string
        description: longitude number of the current position
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RestaurantModel"
        "401":
          description: "Unauthorized user"
definitions:
  LoginCredential:
    type: "object"
    properties:
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"
  AuthToken:
    type: "object"
    properties:
      access_token:
        type: "string"
        format: "string"
      refresh_token:
        type: "string"
        format: "string"
  UserRegistration:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"
  UserUpdateData:
    type: "object"
    properties:
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
  UserModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
      roles:
        type: "string"
        format: "string"
      is_active:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  RestaurantModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      address:
        type: "string"
        format: "string"
      ownerId:
        type: "integer"
        format: "int32"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  MenuModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      categories:
        type: "array"
        items:
          $ref: '#/definitions/CategoryModel'
  CategoryModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      items:
        type: "array"
        items:
          $ref: '#/definitions/ItemModel'
  ItemModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        format: "string"
      price: 
        type: "number"
        format: "float"
      images:
        type: "array"
        items:
          type: "string"
      # TEMPORAL HAY QUE PENSARLO.
      ingredients:
        type: "array"
        items:
          type: "string"
      suitableFor:
        type: "string"
        format: "string"
externalDocs:
  description: "Swagger documentation"
  url: "http://swagger.io"